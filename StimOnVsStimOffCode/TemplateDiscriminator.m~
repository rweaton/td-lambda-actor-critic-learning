function OutputStruct = TemplateDiscriminator(RawActivity, TimeVec,...
    ExampleActivityThresholdCrossingsStruct, ...
    UnitPeriThresholdWindow_SamplePoints, ExampleActivityPrinCompStruct, ...
    ExampleActivityPrincipalComponents, SelectedAreaParametersStruct)
    
    
    %%% Unpack Example Activity threshold-crossing parameters
    Threshold = ExampleActivityThresholdCrossingsStruct.ThresholdLevel;
    
    SlopeSign = ExampleActivityThresholdCrossingsStruct.ThresholdSlope;
    
    RefractoryPeriod = ExampleActivityThresholdCrossingsStruct.PostCrossingRefractoryPeriod;
    
    %%% Unpack Example Activity sample mean and principal components
    PrincipalComponentsArray = ExampleActivityPrinCompStruct.EigenVectors;
    
    NormalizedMeanProfile = ExampleActivityPrinCompStruct.NormalizedMeanProfile;
   
    SampleProjectionsOntoMean = ExampleActivityPrinCompStruct.ProjectionOntoMean;
    
    %%% Unpack template definition parameters
    ScalingVal = SelectedAreaParametersStruct.ScalingValue;
    
    IndicesOfSelectedTemplateExamples = SelectedAreaParametersStruct.SelectedProjectionsList;
    
    TemplateAreaCM = SelectedAreaParametersStruct.CenterOfMass;

    TemplateAreaTheta = SelectedAreaParametersStruct.EllipseRotationAngle;

    TemplateAreaPrincipalMomentsOfInertia = ...
        SelectedAreaParametersStruct.PrincipalMomentsOfInertia;

    TemplateAreaPrincipalAxes = SelectedAreaParametersStruct.PrincipalAxes;
    
    RotationMatrix = [cos(-TemplateAreaTheta), -sin(-TemplateAreaTheta); ...
                      sin(-TemplateAreaTheta), cos(-TemplateAreaTheta)];
    
    %%% Generate distribution of SELECTED projections onto mean profile;
    SelectedSampleProjectionsOntoMean = ...
        SampleProjectionsOntoMean(IndicesOfSelectedTemplateExamples);
    
    MeanOfSelProjectionsOntoMean = mean(SelectedSampleProjectionsOntoMean);
    StdevOfSelProjectionsOntoMean = stdev(SelectedSampleProjectionsOntoMean);
    
    %%% Calculate distribution boundaries
    LowBoundary = MeanOfSelProjectionsOntoMean - 2*StdevOfSelProjectionsOntoMean;
    HighBoundary = MeanOfSelProjectionsOntoMean + 2*StdevOfSelProjectionsOntoMean;
    
    %%% Check for threshold crossings in RawActivity
    RawActivityCrossingsStruct = ...
        ThresholdSlopeDetectorWithRefractoryPeriod(RawActivity, Threshold, SlopeSign, RefractoryPeriod);
    
    %%% Extract peri-threshold activity samples
    RawActivityPeriThresholdSnippitsStruct = DataExtractor(RawActivity, ...
        RawActivityThresholdCrossingsStruct.ThresholdLocations, ...
        UnitPeriThresholdWindow_SamplePoints);
    
    %%% Apply "template" to extracted samples
    CandidateSpikesArray = RawActivityPeriThresholdSnippitsStruct.InputSamples;
    
    %%% Each sample is a row of CandidateSpikesArray
    [nCandidates, SampleSize] = size(CandidateSpikesArray);
    
    %%% Compute sample projections onto the normalized mean profile
    ProjectionsOntoMean = CandidateSpikesArray*NormalizedMeanProfile(:);
    
    %%% Compute sample projections onto first two principal components
    ProjectionsOntoPCs = CandidateSpikesArray*PrincipalComponentsArray(:,1:2);
    
    %%% Translate ProjectionsOntoPCs
    CorrectedProjectionsOntoPCs = ProjectionsOntoPCs - ((TemplateAreaCM')*ones([1, nCandidates]))';
    
    %%% Rotate CorrectedProjectiosOntoPCs
    CorrectedProjectionsOntoPCs = (RotationMatrix*(CorrectedProjectionsOntoPCs'))';
    
    
    %%% Check if ProjectionsOntoMean fall within the distribution of
    %%% projections onto Example Activity normalized mean profile
    
    WithinDistributionOfProjectionsOntoMean = ...
        (ProjectionsOntoMean <= HighBoundary*ones(size(ProjectionsOntoMean)))&...
        (ProjectionsOntoMean >= LowBoundary*ones(size(ProjectionsOntoMean)));
    
    %%% Check if CorrectedProjectionsOntoPCs fall within the principal component
    %%% template space
    aVecMagnitude = ScalingVal*TemplateAreaPrincipalMomentsOfInertia(1);
    bVecMagnitude = ScalingVal*TemplateAreaPrincipalMomentsOfInertia(2);
    
    %%% Check dimension correspondance of CorrectedProjectionsOntoPCs
    WithinDistributionOfProjectionsOntoPCs =  ...
        (aVecMagnitude^)*CorrectedProjectionsOntoPCs(1,:).^2 ...
      + (bVecMagnitude)*CorrectedProjectionsOntoPCs(2,:).^2 <= ...
        ones([1,nCandidates]);
    
    %%% "AND" the two acceptance criteria
    AcceptSample = (WithinDistributionOfProjectionsOntoMean & WithinDistributionOfProjectionsOntoPCs);
    
    %%% Extract locations of accepted events
    AcceptedEvents_Indices = RawActivityThresholdCrossingsStruct.ThresholdLocations(AcceptSample);
    
    OutputStruct.AcceptedEvents_Indices = OutputStruct.AcceptedEvents_Indices;
    
end
    
    
    
    